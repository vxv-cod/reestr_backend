from typing import Annotated, Any, Union
from loguru import logger
from pydantic import BaseModel, ConfigDict, Field, ValidationError, create_model
from sqlalchemy import create_engine, inspect
from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine
from sqlalchemy.orm import DeclarativeBase, sessionmaker
from apps.schemas.__basemodel import Base_Model_id, Base_Model
from sqlalchemy.ext.asyncio import AsyncAttrs
from sqlalchemy.sql.schema import Column
from sqlalchemy.orm.relationships import _RelationshipDeclared
from sqlalchemy.orm.mapper import Mapper
# from rich import print

from config import settings




sync_engine = create_engine(url=settings.DATABASE_URL_SUNC)
# sync_engine.echo = True
sync_session_maker = sessionmaker(bind=sync_engine)

async_engine = create_async_engine(settings.DATABASE_URL_ASUNC)
# async_engine.echo = settings.DEBUG
# async_engine.echo = True
async_session_maker = async_sessionmaker(async_engine, expire_on_commit=False)


# class Base(AsyncAttrs, DeclarativeBase):
class Base(DeclarativeBase):
    '''–ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å—Ö–µ–º—É, —Ç–æ –µ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö'''
    # __table_args__ = {"schema": "stack"}
    
    pydantic_schema : BaseModel = None
    pydantic_schema_id : BaseModel = None
    

    @staticmethod
    def validerrdecor(func):
        def wrapper(self, *args, **kwargs):
            try: 
                res = func(self, *args, **kwargs)
            except ValidationError as exc: 
                print(repr(exc.errors()[0]))
                erro = exc.errors()[0]
                res = {"type": erro["type"], "loc": erro["loc"]}
            return res
        wrapper.__name__ = func.__name__
        wrapper.__doc__ = func.__doc__
        return wrapper


    @validerrdecor
    def result_models_to_read(self, schema: Base_Model) -> Base_Model:
        '''–í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –±–µ–∑ –ø–æ–ª—è id'''
        return schema.model_validate(self.__dict__, from_attributes=True).model_dump()
    

    @staticmethod
    def convert_model_to_dict(value, primary_key_only=False):
        '''### –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–ª–∞—Å—Å–∞ Base –≤ dict'''
        def convert(model: Base, row_dict = {}):
            columns: list[Column] = model.__table__.columns
            for column in columns:
                if primary_key_only and not column.primary_key: continue
                row_dict[column.name] = getattr(model, column.name)
            
            return row_dict
        return [convert(child) for child in value] if isinstance(value, list) else convert(value) if value else None


    def enhanced_convert(self, primary_key_only=False):
        '''### –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º ‚Äî relationships! ü•≥'''
        data = self.convert_model_to_dict(self)
        inspect_manager = inspect(self.__class__)
        relationships: list[_RelationshipDeclared] = inspect_manager.relationships
        for rel in relationships:
            if rel.lazy != "select":
                data[rel.key] = self.convert_model_to_dict(getattr(self, rel.key), primary_key_only)
        return data

    











    

    # @validerrdecor
    # def to_read_model(self) -> BaseModel:
    #     '''–í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –±–µ–∑ –ø–æ–ª—è id'''
    #     return self.pydantic_schema.model_validate(self.__dict__, from_attributes=True).model_dump()
    

    # @validerrdecor
    # def to_read_model_id(self) -> BaseModel:
    #     '''–í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–ª–µ–º id'''
    #     # return self.pydantic_schema_id.model_validate(self.__dict__, from_attributes=True).model_dump()
    #     return self.pydantic_schema_id.model_validate(
    #         self.__dict__, from_attributes=True).model_dump()



    # @validerrdecor
    # # @staticmethod
    # def convert_ORM_model_in_dict(model, find_field=None, exlude_field=False) -> Base_Model:
    #     '''–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –¥–∞–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–æ–∫ model'''  
    #     columns: list[Column] = model.__table__.columns
    #     '''–§—É–Ω–∫—Ü–∏—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∏'''    
    #     type_value = lambda column=Column, default=...: Annotated[column.type.python_type | None, Field(default)]
    #     '''–í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è'''
    #     if not find_field:
    #         dict_types_columns = {column.name: type_value(column) for column in columns}
    #     '''–í—ã–∏–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ'''
    #     if find_field and exlude_field == True:
    #         dict_types_columns = {column.name: type_value(column, None) for column in columns if not getattr(column, find_field)}
    #     '''–í—ã–∏–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ'''
    #     if find_field and exlude_field == False:
    #         dict_types_columns = {column.name: type_value(column) for column in columns if getattr(column, find_field)}
    #     return dict_types_columns

    
    # # @validerrdecor
    # def pydantic_dynamic_model(self, text=None, find_field=None, exlude_field=False, relation=False, dict_columns=None) -> Base_Model:
    #     '''–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Pydantic –Ω–∞ –ª–µ—Ç—É'''
    #     # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ —Å–ø–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤ –∞–≥—Ä—É–º–µ–Ω—Ç–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ None
    #     if dict_columns is None: dict_columns = {}
    #     '''–°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ –∏ –∏—Ö —Ç–∏–ø–æ–≤'''
    #     dict_columns = self.convert_ORM_model_in_dict(self, find_field, exlude_field)
    #     '''–û–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ç–µ–∫—É—Ü–µ–π —Ñ—É–Ω–∫—Ü–∏–∏'''
    #     if relation:
    #         '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ inspect –º–æ–¥–µ–ª–∏'''
    #         inspect_manager: Mapper = inspect(self)
    #         relationships: list[_RelationshipDeclared] = inspect_manager.relationships
    #         '''–ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º —Å–≤—è–∑—è–º'''
    #         for rel in relationships:
    #             '''–í—ã–±–∏—Ä–∞–µ–º —Å–≤—è–∑–∏ –∫—Ä–æ–º–µ lazy != select –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ–Ω–∞ –Ω–µ –≥—Ä—É–∑–∏—Ç—Å—è'''
    #             if rel.lazy != "select":
    #                 '''–£–∑–Ω–∞–µ–º –∫–ª–∞—Å—Å –º–æ–¥–µ–ª—å –∏–∑ —Å–≤—è–∑–∏'''
    #                 class_rel: Base = rel.entity.class_
    #                 '''–†–µ–∫—É—Ä—Å–∏—è –Ω–∞ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏'''
    #                 text = "relationships"
    #                 rel_pydantic = self.pydantic_dynamic_model(class_rel, text=text, relation=True, dict_columns=dict_columns)
    #                 '''–°–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–∞ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ö–µ–º—ã Pydantic'''
    #                 if rel.uselist:
    #                     rel_field = Annotated[list[rel_pydantic] | None, Field(...)]
    #                 else:
    #                     rel_field = Annotated[rel_pydantic | None, Field(...)]
    #                 '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ–ª–µ —Å–≤—è–∑–∏ —Å–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π'''
    #                 dict_columns[rel.key] = rel_field

    #     '''–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ pydantic'''
    #     name_new_cls = f'Dynamic_model_{self.__tablename__}_{text}'
    #     '''C–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Pydantic'''
    #     return create_model(name_new_cls, **dict_columns)








    # repr_cols_num = 33
    # repr_cols = tuple()
    
    # def __repr__(self):
    #     """Relationships –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ repr(), —Ç.–∫. –º–æ–≥—É—Ç –≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –ø–æ–¥–≥—Ä—É–∑–∫–∞–º"""
    #     cols = []
    #     for idx, col in enumerate(self.__table__.columns.keys()):
    #         if col in self.repr_cols or idx < self.repr_cols_num:
    #             cols.append(f"{col} = {getattr(self, col)}")

        # return f"<{self.__class__.__name__} {', '.join(cols)}>"
    
    # def __repr__(self):
    #     return f"<{self.__class__.__name__}>"

    # def __repr__(self):
    #     return f"{self.name}"


    
    # def pydantic_dynamic_model(self, find_field=None, exlude_field=False, relation=False) -> Base_Model:
    #     '''–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Pydantic –Ω–∞ –ª–µ—Ç—É'''
    #     '''–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –¥–∞–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–æ–∫ model'''    
    #     columns: list[Column] = self.__table__.columns
    #     '''–§—É–Ω–∫—Ü–∏—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∏'''    
    #     type_value = lambda column=Column, default=...: Annotated[column.type.python_type | None, Field(default)]
    #     '''–í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è'''
    #     if not find_field:
    #         dict_types_columns = {column.name: type_value(column) for column in columns}
    #     '''–í—ã–∏–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ'''
    #     if find_field and exlude_field == True:
    #         dict_types_columns = {column.name: type_value(column, None) for column in columns if not getattr(column, find_field)}
    #     '''–í—ã–∏–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ'''
    #     if find_field and exlude_field == False:
    #         dict_types_columns = {column.name: type_value(column) for column in columns if getattr(column, find_field)}
    #     '''–í—ã–±–∏—Ä–∞–µ–º –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤—è–∑—è–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ –º–æ–¥–µ–ª–∏ –∫–∞–∫ lazy='joined' '''
    #     if relation:
    #         inspect_manager: Mapper = inspect(self)
    #         relationships: list[_RelationshipDeclared] = inspect_manager.relationships
    #         for rel in relationships:
    #             if rel.lazy != "select":
    #                 # –ö–ª–∞—Å—Å —Å–≤—è–∑–∏
    #                 class_rel: Base = rel.entity.class_
    #                 # –ö–æ–ª–æ–Ω–∫–∏
    #                 rel_columns: list[Column] = class_rel.__table__.columns
    #                 # –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    #                 rel_dict_types_columns = {column.name: type_value(column) for column in rel_columns}
    #                 # pydantic –∫–ª–∞—Å—Å —Å–≤—è–∑–µ–π
    #                 rel_pydantic = create_model(f'DM_{self.__tablename__}_{rel.key}', **rel_dict_types_columns)
    #                 # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –ø–æ–ª—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
    #                 if rel.uselist:
    #                     rel_field = Annotated[list[rel_pydantic] | None, Field(...)]
    #                 else:
    #                     rel_field = Annotated[rel_pydantic | None, Field(...)]
    #                 # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ–ª–µ —Å–≤—è–∑–∏ —Å–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π
    #                 dict_types_columns[rel.key] = rel_field
    #     '''C–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª—å Pydantic —Ä–æ–¥–∏—Ç–µ–ª—è'''
    #     return create_model(f'Dynamic_model_{self.__tablename__}', **dict_types_columns)